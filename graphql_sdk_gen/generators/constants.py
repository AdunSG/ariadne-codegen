from enum import Enum
from typing import Dict, Final

SIMPLE_TYPE_MAP: Final[Dict[str, str]] = {
    "String": "str",
    "ID": "str",
    "Int": "int",
    "Boolean": "bool",
    "Float": "float",
}
OPTIONAL: Final[str] = "Optional"
LIST: Final[str] = "list"
UNION: Final[str] = "Union"
ANY: Final[str] = "Any"


class ClassType(str, Enum):
    ENUM = "ENUM"
    INPUT = "INPUT"
    OBJECT = "OBJECT"
    INTERFACE = "INTERFACE"


TIMESTAMP_COMMENT = "# Generated by GraphQL SDK Gen on {}\n"
SOURCE_COMMENT = "# Source: {}\n"
COMMENT_DATETIME_FORMAT = "%Y-%m-%d %H:%M"

BASE_MODEL_CLASS_NAME = "BaseModel"

TYPENAME_FIELD_NAME = "__typename"

TYPING_MODULE = "typing"
PYDANTIC_MODULE = "pydantic"
FIELD_CLASS = "Field"
UPDATE_FORWARD_REFS_METHOD = "update_forward_refs"
ENUM_MODULE = "enum"
ENUM_CLASS = "Enum"

MIXIN_NAME = "mixin"
MIXIN_FROM_NAME = "from"
MIXIN_IMPORT_NAME = "import"

SKIP_DIRECTIVE_NAME = "skip"
INCLUDE_DIRECTIVE_NAME = "include"
